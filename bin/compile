#!/usr/bin/env bash

set -e

buildpack_dir=$(dirname $(dirname $(readlink -e $0)))
build_dir="$1"
cache_dir="$2"
env_dir="$3"

mkdir -p $cache_dir

function lazyDownload() {
    url="$1"
    target=$(basename "$url")
    if [ ! -f "$cache_dir/$target" ]; then
        echo "downloading $target"
        curl -L "$url" -o "$cache_dir/$target"
    else
        echo "$target already present"
    fi
}

echo "State: 1"

PRE_FLIGHT_CHECK=yes

if [[ -z "$ADMIN_PASSWORD" && ! -f "$env_dir/ADMIN_PASSWORD" ]]; then
    echo "You should provide an ADMIN_PASSWORD environment variable"
    PRE_FLIGHT_CHECK=no
fi

if [[ -n "$DATABASE_URL" && "$DATABASE_URL" == postgres* || "$(cat "$env_dir/DATABASE_URL")" == postgres* ]]; then
    echo "Postgres database detected"
else
    echo "You should add a database service to this application, and it should be postgres"
    PRE_FLIGHT_CHECK=no
fi

if [[ "$PRE_FLIGHT_CHECK" == "no" ]]; then
    exit 1
fi

echo "State: 2"

RUNTIME_VERSION=$(cat "$build_dir/model/metadata.json" | grep RuntimeVersion | awk '{ print $2 }' | sed 's/\"//g; s/,//g; s/\n//g; s/\r//g')

lazyDownload https://packages.mendix.com/debian/pool/non-free/o/oracle-j2re1.7/oracle-j2re1.7_1.7.0+update55_amd64.deb
lazyDownload https://download.mendix.com/get-pip.py
lazyDownload https://download.mendix.com/runtimes/mendix-${RUNTIME_VERSION}.tar.gz

# we set the homedir to the build_dir, so pip will install to $build_dir/.local
export HOME="$build_dir"

python "$cache_dir/get-pip.py" --user

mkdir -p "$cache_dir/pip"

echo "State: 3"

# DIRT: we need to download a custom version of PyYAML that does not try to compile libyaml
~/.local/bin/pip install --download-cache "$cache_dir/pip" --user http://download.mendix.com/PyYAML-3.11.tar.gz http://download.mendix.com/m2ee-tools-0.5.9.tar.gz

echo "State: 4"

dpkg-deb -x "$cache_dir/oracle-j2re1.7_1.7.0+update55_amd64.deb" "$build_dir/.local"

echo "State: 5"

ln -s "../usr/lib/jvm/j2re1.7-oracle/bin/java" "$build_dir/.local/bin/java"

# DIRT: the script contains import m2ee, so we need to make sure it imports the package, not m2ee.py
mv "$build_dir/.local/bin/m2ee.py" "$build_dir/.local/bin/m2ee"

mkdir -p $build_dir/{runtimes,log}
mkdir -p $build_dir/database
mkdir -p $build_dir/data/{files,tmp}
tar xf "$cache_dir/mendix-${RUNTIME_VERSION}.tar.gz" -C "$build_dir/runtimes"

echo "State: 6"

cp "$buildpack_dir/m2ee.yaml" "$build_dir/m2ee-building.yaml"

sed -i "s|BUILD_PATH|$build_dir|g" "$build_dir/m2ee-building.yaml"

echo "State: 7"

rm "$build_dir/m2ee-building.yaml"

cp "$buildpack_dir/m2ee.yaml" "$build_dir/.local/m2ee.yaml"
cp "$buildpack_dir/start.py" "$build_dir/start.py"
